/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from '@alephium/cli'
import { NetworkId } from '@alephium/web3'
import { TokenFaucetInstance } from '.'
import { default as testnetDeployments } from '../.deployments.testnet.json'
import { default as devnetDeployments } from '../.deployments.devnet.json'

export type Deployments = {
  deployerAddress: string
  contracts: {
    TokenFaucet: DeployContractExecutionResult<TokenFaucetInstance>
  }
}

export function loadDeployments(networkId: NetworkId, deployerAddress?: string): Deployments {
  const deployments =
    networkId === 'testnet' ? testnetDeployments : networkId === 'devnet' ? devnetDeployments : undefined
  if (deployments === undefined) {
    throw Error('The contract has not been deployed to the ' + networkId)
  }
  const allDeployments = Array.isArray(deployments) ? deployments : [deployments]
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        'The contract has been deployed multiple times on ' + networkId + ', please specify the deployer address'
      )
    } else {
      return allDeployments[0]
    }
  }
  const result = allDeployments.find((d) => d.deployerAddress === deployerAddress)
  if (result === undefined) {
    throw Error('The contract deployment result does not exist')
  }
  return result
}
